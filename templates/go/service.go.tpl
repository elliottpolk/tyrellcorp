// Code generated by tyrellcorp. DO NOT EDIT.
// source: service.go.tpl

package {{ .Package | ToLower | Trim }}

import (
    "context"

    "{{ .Repository | ToLower | Trim }}/{{ .Package | ToLower | Trim }}/config"

    "github.com/pkg/errors"
    "go.mongodb.org/mongo-driver/bson"
    "go.mongodb.org/mongo-driver/mongo"
)

type {{ .Name }}Server struct {
    cmp    *config.Composition
    client *mongo.Client
}

func New{{ .Name }}Server(cmp *config.Composition, client *mongo.Client) {{ .Name }}ServiceServer {
    return &{{ .Name }}Server {
        cmp: cmp,
        client: client,
    }
}

{{ if .Create }}
func (s *{{ .Name }}Server) Create(ctx context.Context, req *{{ .Name }}Request) (*Empty, error) {
    empty := &Empty{RequestId: req.RequestId}

    if s.client == nil {
        return empty, errors.New("no valid mongo client")
    }

    client := s.client
    if err := client.UseSession(ctx, func(session mongo.SessionContext) error {
        defer session.EndSession(ctx)

        if err := Create(session, req.Payload, client.Database(repo)); err != nil {
            defer session.AbortTransaction(ctx)
            return err
        }

        return nil
    }); err != nil {
        return empty, err
    }
    return empty, nil
}
{{ end }}

{{ if .Retrieve }}
func (s *{{ .Name }}Server) Retrieve(ctx context.Context, req *{{ .Name }}Request) (*{{ .Name }}Response, error) {
    if s.client == nil {
        return nil, errors.New("no valid mongo client")
    }

    result := &{{ .Name }}Response {
        RequestId: req.RequestId,
    }

    client := s.client
    if err := client.UseSession(ctx, func(session mongo.SessionContext) error {
        defer session.EndSession(ctx)

        // retrieve 1 and return by ID if provided in request
        if id := req.Id; len(id) > 0 {
            item, err := RetrieveOne(ctx, id, client.Database(repo))
            if err != nil {
                return errors.Wrapf(err, "unable to retrieve record for id %s", id)
            }
            result.Payload = []*{{ .Name }}{item}

            return nil
        }

        // TODO:
        // - handle a list of whitelisted request params for filtering
        items, err := Retrieve(ctx, bson.D{}, client.Database(repo))
        if err != nil {
            return errors.Wrap(err, "unable to retrieve records")
        }
        result.Payload = items

        return nil
    }); err != nil {
        return nil, err
    }

    return result, nil
}
{{ end }}

{{ if .Update }}
func (s *{{ .Name }}Server) Update(ctx context.Context, req *{{ .Name }}Request) (*{{ .Name }}Response, error) {
    if s.client == nil {
        return nil, errors.New("no valid mongo client")
    }

    result := &{{ .Name }}Response {
        RequestId: req.RequestId,
    }

    client := s.client
    if err := client.UseSession(ctx, func(session mongo.SessionContext) error {
        defer session.EndSession(ctx)

        // TODO:
        // - handle a list of whitelisted request params for filtering
        if err := Update(session, req.Username, bson.D{}, req.Payload, client.Database(repo)); err != nil {
            defer session.AbortTransaction(ctx)
            return errors.Wrap(err, "unable to update records")
        }
        result.Payload = req.Payload

        return nil
    }); err != nil {
        return nil, err
    }

    return result, nil
}
{{ end }}

{{ if .Delete }}
func (s *{{ .Name }}Server) Delete(ctx context.Context, req *{{ .Name }}Request) (*Empty, error) {
    empty := &Empty{RequestId: req.RequestId}

    if s.client == nil {
        return empty, errors.New("no valid mongo client")
    }

    client := s.client
    if err := client.UseSession(ctx, func(session mongo.SessionContext) error {
        defer session.EndSession(ctx)

        if err := Delete(session, req.Username, req.Payload, client.Database(repo)); err != nil {
            defer session.AbortTransaction(ctx)
            return errors.Wrap(err, "unable to delete records")
        }

        return nil
    }); err != nil {
        return empty, err
    }

    return empty, nil
}
{{ end }}