// Code generated by protoc-gen-go. DO NOT EDIT.
// source: specservice.proto

package tyrellcorp

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	// unique identifier of the original incoming request to help troubleshoot
	RequestId            string   `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_16996c9b37774101, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func (m *Empty) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

type SpecRequest struct {
	// unique identifier to help troubleshoot each request
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// username of the one making the request
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// unique identifier of the tyrellcorp.Spec
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// dataset to process
	Payload              []*Spec  `protobuf:"bytes,4,rep,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpecRequest) Reset()         { *m = SpecRequest{} }
func (m *SpecRequest) String() string { return proto.CompactTextString(m) }
func (*SpecRequest) ProtoMessage()    {}
func (*SpecRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16996c9b37774101, []int{1}
}

func (m *SpecRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpecRequest.Unmarshal(m, b)
}
func (m *SpecRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpecRequest.Marshal(b, m, deterministic)
}
func (m *SpecRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecRequest.Merge(m, src)
}
func (m *SpecRequest) XXX_Size() int {
	return xxx_messageInfo_SpecRequest.Size(m)
}
func (m *SpecRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SpecRequest proto.InternalMessageInfo

func (m *SpecRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *SpecRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *SpecRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SpecRequest) GetPayload() []*Spec {
	if m != nil {
		return m.Payload
	}
	return nil
}

type SpecResponse struct {
	// unique identifier of the original incoming request to help troubleshoot
	RequestId            string   `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Payload              []*Spec  `protobuf:"bytes,2,rep,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpecResponse) Reset()         { *m = SpecResponse{} }
func (m *SpecResponse) String() string { return proto.CompactTextString(m) }
func (*SpecResponse) ProtoMessage()    {}
func (*SpecResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_16996c9b37774101, []int{2}
}

func (m *SpecResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpecResponse.Unmarshal(m, b)
}
func (m *SpecResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpecResponse.Marshal(b, m, deterministic)
}
func (m *SpecResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecResponse.Merge(m, src)
}
func (m *SpecResponse) XXX_Size() int {
	return xxx_messageInfo_SpecResponse.Size(m)
}
func (m *SpecResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SpecResponse proto.InternalMessageInfo

func (m *SpecResponse) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *SpecResponse) GetPayload() []*Spec {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "tyrellcorp.Empty")
	proto.RegisterType((*SpecRequest)(nil), "tyrellcorp.SpecRequest")
	proto.RegisterType((*SpecResponse)(nil), "tyrellcorp.SpecResponse")
}

func init() { proto.RegisterFile("specservice.proto", fileDescriptor_16996c9b37774101) }

var fileDescriptor_16996c9b37774101 = []byte{
	// 387 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0xc1, 0x6a, 0xdb, 0x40,
	0x14, 0x44, 0x72, 0xab, 0xda, 0xcf, 0x6d, 0xb1, 0x97, 0x82, 0x85, 0xa8, 0xc1, 0x08, 0x5a, 0x8c,
	0x5b, 0x24, 0xea, 0xde, 0xda, 0x9b, 0x93, 0x1c, 0x72, 0x31, 0xc6, 0x26, 0x87, 0xf8, 0x90, 0x20,
	0x4b, 0x0f, 0x67, 0x93, 0x95, 0x76, 0xb3, 0x5a, 0x1b, 0x4c, 0xc8, 0x25, 0xe4, 0x0f, 0xf2, 0x69,
	0xf9, 0x85, 0x9c, 0xf3, 0x0d, 0xc1, 0xbb, 0x49, 0x2c, 0xe3, 0x10, 0x93, 0xdc, 0xa4, 0x99, 0x9d,
	0x79, 0x6f, 0x66, 0x17, 0xea, 0xb9, 0xc0, 0x38, 0x47, 0x39, 0xa7, 0x31, 0x06, 0x42, 0x72, 0xc5,
	0x09, 0xa8, 0x85, 0x44, 0xc6, 0x62, 0x2e, 0x85, 0x07, 0x4b, 0xda, 0xe0, 0xde, 0xf7, 0x29, 0xe7,
	0x53, 0x86, 0x61, 0x24, 0x68, 0x18, 0x65, 0x19, 0x57, 0x91, 0xa2, 0x3c, 0xcb, 0x0d, 0xeb, 0xff,
	0x84, 0x8f, 0x7b, 0xa9, 0x50, 0x0b, 0xd2, 0x04, 0x90, 0x78, 0x3e, 0xc3, 0x5c, 0x1d, 0xd3, 0xc4,
	0xb5, 0x5a, 0x56, 0xbb, 0x32, 0xac, 0x3c, 0x22, 0xfb, 0x89, 0x7f, 0x6d, 0x41, 0x75, 0x24, 0x30,
	0x1e, 0x1a, 0x64, 0xcb, 0x71, 0xe2, 0x41, 0x79, 0x96, 0xa3, 0xcc, 0xa2, 0x14, 0x5d, 0x5b, 0x93,
	0xcf, 0xff, 0xe4, 0x2b, 0xd8, 0x34, 0x71, 0x4b, 0x1a, 0xb5, 0x69, 0x42, 0x3a, 0xf0, 0x49, 0x44,
	0x0b, 0xc6, 0xa3, 0xc4, 0xfd, 0xd0, 0x2a, 0xb5, 0xab, 0xdd, 0x5a, 0xb0, 0x8a, 0x12, 0xe8, 0xa1,
	0x4f, 0x07, 0xfc, 0x43, 0xf8, 0x6c, 0xb6, 0xc8, 0x05, 0xcf, 0x72, 0xdc, 0xb6, 0x46, 0xc1, 0xda,
	0xde, 0x62, 0xdd, 0xbd, 0xb7, 0x4d, 0xc2, 0x91, 0x69, 0x95, 0xf4, 0xc1, 0xd9, 0x91, 0x18, 0x29,
	0x24, 0x8d, 0x0d, 0x91, 0x19, 0xe0, 0xd5, 0x8b, 0x84, 0xae, 0xd1, 0x77, 0xaf, 0x6e, 0xef, 0x6e,
	0x6c, 0xe2, 0x7f, 0xd1, 0x7d, 0xcf, 0xff, 0x84, 0xfa, 0xa2, 0xfe, 0x59, 0x1d, 0x72, 0x0a, 0xe5,
	0x21, 0x2a, 0x49, 0x71, 0xfe, 0x8a, 0xa3, 0xbb, 0x49, 0x98, 0xa4, 0xfe, 0x2f, 0x6d, 0xfc, 0x83,
	0xac, 0x1b, 0x8f, 0xbf, 0x11, 0xb2, 0x06, 0x84, 0x17, 0x34, 0xb9, 0x24, 0x23, 0x70, 0x0e, 0x44,
	0xf2, 0xd6, 0xdd, 0x9b, 0x7a, 0x44, 0xc3, 0x7b, 0xc1, 0x71, 0x19, 0xa0, 0x0f, 0xce, 0x2e, 0x32,
	0x7c, 0x5f, 0x21, 0x9d, 0x8d, 0x42, 0x7a, 0x47, 0xe0, 0xc5, 0x3c, 0x0d, 0x90, 0x31, 0xca, 0x95,
	0x12, 0x9c, 0x9d, 0x15, 0xd4, 0xbd, 0x5a, 0xe1, 0x2e, 0x06, 0xcb, 0xa7, 0x3a, 0xb0, 0xc6, 0xbf,
	0xa7, 0x54, 0x9d, 0xcc, 0x26, 0x41, 0xcc, 0xd3, 0xb0, 0x20, 0x0b, 0x57, 0xb2, 0xff, 0xab, 0xcf,
	0x89, 0xa3, 0x5f, 0xf8, 0xdf, 0x87, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x89, 0x2c, 0x96, 0x2c,
	0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SpecServiceClient is the client API for SpecService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpecServiceClient interface {
	// create new Service item(s)
	Create(ctx context.Context, in *SpecRequest, opts ...grpc.CallOption) (*Empty, error)
	// retrieve a list of Spec items
	Retrieve(ctx context.Context, in *SpecRequest, opts ...grpc.CallOption) (*SpecResponse, error)
	// update Spec item(s)
	Update(ctx context.Context, in *SpecRequest, opts ...grpc.CallOption) (*Empty, error)
	// delete Spec item(s)
	Delete(ctx context.Context, in *SpecRequest, opts ...grpc.CallOption) (*Empty, error)
}

type specServiceClient struct {
	cc *grpc.ClientConn
}

func NewSpecServiceClient(cc *grpc.ClientConn) SpecServiceClient {
	return &specServiceClient{cc}
}

func (c *specServiceClient) Create(ctx context.Context, in *SpecRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/tyrellcorp.SpecService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specServiceClient) Retrieve(ctx context.Context, in *SpecRequest, opts ...grpc.CallOption) (*SpecResponse, error) {
	out := new(SpecResponse)
	err := c.cc.Invoke(ctx, "/tyrellcorp.SpecService/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specServiceClient) Update(ctx context.Context, in *SpecRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/tyrellcorp.SpecService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specServiceClient) Delete(ctx context.Context, in *SpecRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/tyrellcorp.SpecService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpecServiceServer is the server API for SpecService service.
type SpecServiceServer interface {
	// create new Service item(s)
	Create(context.Context, *SpecRequest) (*Empty, error)
	// retrieve a list of Spec items
	Retrieve(context.Context, *SpecRequest) (*SpecResponse, error)
	// update Spec item(s)
	Update(context.Context, *SpecRequest) (*Empty, error)
	// delete Spec item(s)
	Delete(context.Context, *SpecRequest) (*Empty, error)
}

// UnimplementedSpecServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSpecServiceServer struct {
}

func (*UnimplementedSpecServiceServer) Create(ctx context.Context, req *SpecRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedSpecServiceServer) Retrieve(ctx context.Context, req *SpecRequest) (*SpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (*UnimplementedSpecServiceServer) Update(ctx context.Context, req *SpecRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedSpecServiceServer) Delete(ctx context.Context, req *SpecRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterSpecServiceServer(s *grpc.Server, srv SpecServiceServer) {
	s.RegisterService(&_SpecService_serviceDesc, srv)
}

func _SpecService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tyrellcorp.SpecService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServiceServer).Create(ctx, req.(*SpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecService_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServiceServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tyrellcorp.SpecService/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServiceServer).Retrieve(ctx, req.(*SpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tyrellcorp.SpecService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServiceServer).Update(ctx, req.(*SpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tyrellcorp.SpecService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServiceServer).Delete(ctx, req.(*SpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SpecService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tyrellcorp.SpecService",
	HandlerType: (*SpecServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SpecService_Create_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _SpecService_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SpecService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SpecService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "specservice.proto",
}
